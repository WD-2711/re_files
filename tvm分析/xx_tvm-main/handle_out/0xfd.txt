0xfd p_a b_ULONG64 c_ULONG64

0xDE5E

if(*(PUCHAR)p_a == 1)
{V_RIP += b_ULONG64;}
else if(*(PUCHAR)p_a == 0)
{V_RIP += c_ULONG64;}

v_je_iregb_ll_ll
----------------------------------------

0x1400d5c7e : mov     r9, [rbp+8]                     
0x1400d5c8b : mov     r8w, [r9]                       
0x1400d5c8f : xor     r8w, 0DE5Eh                     
0x1400d5c95 : mov     rdx, 0B5754BD7D4FEA719h         
0x1400d5c9f : not     rdx                             
0x1400d5ca2 : lea     rdx, [r10+rdx]                  
0x1400d5ca6 : movzx   r8, r8w                         
0x1400d5caa : mov     rcx, 4A8AB4282B0158E5h          
0x1400d5cb4 : not     rcx                             
0x1400d5cb7 : add     r8, rcx                         
0x1400d5cba : lea     r8, [rdx+r8]                    p_a = r8
0x1400d5cbe : mov     r8b, [r8]                       r8b = *(PUCHAR)p_a
0x1400d5cc1 : lea     r9, [r9+2]                      
0x1400d5cc5 : jmp     loc_1400D7AE0                   
0x1400d7ae4 : mov     rdx, [r9]                       
0x1400d7aef : lea     r9, [r9+8]                      b
0x1400d7af6 : mov     rcx, [r9]                       rcx = b
0x1400d7b02 : movzx   r8, r8b                         
0x1400d7b06 : jmp     loc_1400DA95B                   
0x1400da95d : dec     r8                              
0x1400da960 : not     r8                              
0x1400da963 : not     r8                              
0x1400da966 : xchg    rax, r8                         
0x1400da968 : not     rax                             
0x1400da96b : mov     r8, rax                         
0x1400da96e : not     rax                             
0x1400da971 : and     rdx, r8                         
0x1400da974 : and     rcx, rax                        
0x1400da977 : add     rdx, rcx                        
0x1400da97a : lea     rdx, [r9+rdx]                   
0x1400da97e : mov     r9, 0CDA111CEFE16D240h          
0x1400da988 : not     r9                              
0x1400da98b : lea     r9, [rdx+r9]                    
0x1400da98f : mov     r8, 325EEE3101E92DB6h           
0x1400da999 : jmp     loc_1400D8255                   
0x1400d8257 : not     r8                              
0x1400d825a : lea     r8, [r9+r8]                     
0x1400d8264 : mov     [rbp+8], r8                     
0x1400d826e : jmp     loc_1400DAC79                   
0x1400dac7c : mov     r9, [rbp+8]                     
0x1400dac89 : mov     r8b, [r9]                       
0x1400dac8c : xor     r8b, 5Dh                        
0x1400dac90 : mov     rdx, 0D3676A56DAFF3C65h         
0x1400dac9a : jmp     loc_1400D7763                   
0x1400d7764 : not     rdx                             
0x1400d7767 : lea     rdx, [r9+rdx]                   
0x1400d776b : mov     r9, 2C9895A92500C398h           
0x1400d7775 : not     r9                              
0x1400d7778 : lea     r9, [rdx+r9]                    
0x1400d777f : jmp     loc_1400D5B91                   
0x1400d5b95 : mov     [rbp+8], r9                     
0x1400d5b9e : movzx   r8, r8b                         
0x1400d5ba2 : sub     r8, 1; switch 200 cases         
0x1400d5ba6 : jmp     loc_1400D98A8                   
0x1400d98aa : cmp     r8, 0C8h                        
0x1400d98b1 : jnb     def_1400D655C; jumptable 00000001400D655C default case, cases 1-6,8,13,14,33-36,38,41-44,49,50,52,54,57-60,62,65-67,69-74,77-80,82,83,85-90,93-96,98-113,115,117,119,121-123,126,128-131,133,134,144-147,149,152-157,159,162-164,166-168,170-177,182,185-193,196-199
